// WARNING: This file is automatically generated. Do not edit.
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
import { DocumentNode } from 'graphql';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';
export type Maybe<T> = T | null;
export type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };


/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Desktop = {
  id: Scalars['Int'];
  title: Scalars['String'];
  urls: Array<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  created_at: Scalars['String'];
  updated_at: Scalars['String'];
};

export type Mutation = {
  DesktopCreate?: Maybe<Desktop>;
  DesktopUpdate?: Maybe<Desktop>;
  DesktopDelete: Scalars['Int'];
};


export type MutationDesktopCreateArgs = {
  title: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  urls: Array<Scalars['String']>;
};


export type MutationDesktopUpdateArgs = {
  id: Scalars['Int'];
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  urls?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type MutationDesktopDeleteArgs = {
  id: Scalars['Int'];
};

export type Query = {
  Desktop?: Maybe<Array<Maybe<Desktop>>>;
};

export type Subscription = {
  DesktopCreated?: Maybe<Desktop>;
  DesktopUpdated?: Maybe<Desktop>;
  DesktopDeleted: Scalars['Int'];
};

export type DesktopCreateMutationVariables = {
  title: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  urls: Array<Scalars['String']>;
};


export type DesktopCreateMutation = { DesktopCreate?: Maybe<DesktopPartsFragment> };

export type DesktopCreatedSubscriptionVariables = {};


export type DesktopCreatedSubscription = { DesktopCreated?: Maybe<DesktopPartsFragment> };

export type DesktopDeleteMutationVariables = {
  id: Scalars['Int'];
};


export type DesktopDeleteMutation = Pick<Mutation, 'DesktopDelete'>;

export type DesktopDeletedSubscriptionVariables = {};


export type DesktopDeletedSubscription = Pick<Subscription, 'DesktopDeleted'>;

export type DesktopListQueryVariables = {};


export type DesktopListQuery = { Desktop?: Maybe<Array<Maybe<DesktopPartsFragment>>> };

export type DesktopPartsFragment = Pick<Desktop, 'id' | 'title' | 'description' | 'urls' | 'created_at' | 'updated_at'>;

export type DesktopUpdateMutationVariables = {
  id: Scalars['Int'];
  title?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  urls?: Maybe<Array<Scalars['String']>>;
};


export type DesktopUpdateMutation = { DesktopUpdate?: Maybe<DesktopPartsFragment> };

export type DesktopUpdatedSubscriptionVariables = {};


export type DesktopUpdatedSubscription = { DesktopUpdated?: Maybe<DesktopPartsFragment> };



export type ResolverTypeWrapper<T> = Promise<T> | T;


export type StitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type isTypeOfResolverFn<T = {}> = (obj: T, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  Query: ResolverTypeWrapper<{}>,
  Desktop: ResolverTypeWrapper<Desktop>,
  Int: ResolverTypeWrapper<Scalars['Int']>,
  String: ResolverTypeWrapper<Scalars['String']>,
  Mutation: ResolverTypeWrapper<{}>,
  Subscription: ResolverTypeWrapper<{}>,
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>,
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  Query: {},
  Desktop: Desktop,
  Int: Scalars['Int'],
  String: Scalars['String'],
  Mutation: {},
  Subscription: {},
  Boolean: Scalars['Boolean'],
};

export type DesktopResolvers<ContextType = any, ParentType extends ResolversParentTypes['Desktop'] = ResolversParentTypes['Desktop']> = {
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>,
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  urls?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>,
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>,
  created_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  updated_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>,
  __isTypeOf?: isTypeOfResolverFn<ParentType>,
};

export type MutationResolvers<ContextType = any, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = {
  DesktopCreate?: Resolver<Maybe<ResolversTypes['Desktop']>, ParentType, ContextType, RequireFields<MutationDesktopCreateArgs, 'title' | 'urls'>>,
  DesktopUpdate?: Resolver<Maybe<ResolversTypes['Desktop']>, ParentType, ContextType, RequireFields<MutationDesktopUpdateArgs, 'id'>>,
  DesktopDelete?: Resolver<ResolversTypes['Int'], ParentType, ContextType, RequireFields<MutationDesktopDeleteArgs, 'id'>>,
};

export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  Desktop?: Resolver<Maybe<Array<Maybe<ResolversTypes['Desktop']>>>, ParentType, ContextType>,
};

export type SubscriptionResolvers<ContextType = any, ParentType extends ResolversParentTypes['Subscription'] = ResolversParentTypes['Subscription']> = {
  DesktopCreated?: SubscriptionResolver<Maybe<ResolversTypes['Desktop']>, "DesktopCreated", ParentType, ContextType>,
  DesktopUpdated?: SubscriptionResolver<Maybe<ResolversTypes['Desktop']>, "DesktopUpdated", ParentType, ContextType>,
  DesktopDeleted?: SubscriptionResolver<ResolversTypes['Int'], "DesktopDeleted", ParentType, ContextType>,
};

export type Resolvers<ContextType = any> = {
  Desktop?: DesktopResolvers<ContextType>,
  Mutation?: MutationResolvers<ContextType>,
  Query?: QueryResolvers<ContextType>,
  Subscription?: SubscriptionResolvers<ContextType>,
};


/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
*/
export type IResolvers<ContextType = any> = Resolvers<ContextType>;

export const DesktopPartsFragmentDoc: DocumentNode = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"DesktopParts"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Desktop"}},"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"title"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"description"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"urls"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"created_at"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"updated_at"},"arguments":[],"directives":[]}]}}]};
export const DesktopCreateDocument: DocumentNode = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DesktopCreate"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"title"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"description"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"urls"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}},"directives":[]}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"DesktopCreate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"description"},"value":{"kind":"Variable","name":{"kind":"Name","value":"description"}}},{"kind":"Argument","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"title"}}},{"kind":"Argument","name":{"kind":"Name","value":"urls"},"value":{"kind":"Variable","name":{"kind":"Name","value":"urls"}}}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"DesktopParts"},"directives":[]}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"DesktopParts"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Desktop"}},"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"title"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"description"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"urls"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"created_at"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"updated_at"},"arguments":[],"directives":[]}]}}]};
export type DesktopCreateMutationFn = ApolloReactCommon.MutationFunction<DesktopCreateMutation, DesktopCreateMutationVariables>;

/**
 * __useDesktopCreateMutation__
 *
 * To run a mutation, you first call `useDesktopCreateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDesktopCreateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [desktopCreateMutation, { data, loading, error }] = useDesktopCreateMutation({
 *   variables: {
 *      title: // value for 'title'
 *      description: // value for 'description'
 *      urls: // value for 'urls'
 *   },
 * });
 */
export function useDesktopCreateMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DesktopCreateMutation, DesktopCreateMutationVariables>) {
        return ApolloReactHooks.useMutation<DesktopCreateMutation, DesktopCreateMutationVariables>(DesktopCreateDocument, baseOptions);
      }
export type DesktopCreateMutationHookResult = ReturnType<typeof useDesktopCreateMutation>;
export type DesktopCreateMutationResult = ApolloReactCommon.MutationResult<DesktopCreateMutation>;
export type DesktopCreateMutationOptions = ApolloReactCommon.BaseMutationOptions<DesktopCreateMutation, DesktopCreateMutationVariables>;
export const DesktopCreatedDocument: DocumentNode = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"subscription","name":{"kind":"Name","value":"DesktopCreated"},"variableDefinitions":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"DesktopCreated"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"DesktopParts"},"directives":[]}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"DesktopParts"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Desktop"}},"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"title"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"description"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"urls"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"created_at"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"updated_at"},"arguments":[],"directives":[]}]}}]};

/**
 * __useDesktopCreatedSubscription__
 *
 * To run a query within a React component, call `useDesktopCreatedSubscription` and pass it any options that fit your needs.
 * When your component renders, `useDesktopCreatedSubscription` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDesktopCreatedSubscription({
 *   variables: {
 *   },
 * });
 */
export function useDesktopCreatedSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<DesktopCreatedSubscription, DesktopCreatedSubscriptionVariables>) {
        return ApolloReactHooks.useSubscription<DesktopCreatedSubscription, DesktopCreatedSubscriptionVariables>(DesktopCreatedDocument, baseOptions);
      }
export type DesktopCreatedSubscriptionHookResult = ReturnType<typeof useDesktopCreatedSubscription>;
export type DesktopCreatedSubscriptionResult = ApolloReactCommon.SubscriptionResult<DesktopCreatedSubscription>;
export const DesktopDeleteDocument: DocumentNode = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DesktopDelete"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},"directives":[]}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"DesktopDelete"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"directives":[]}]}}]};
export type DesktopDeleteMutationFn = ApolloReactCommon.MutationFunction<DesktopDeleteMutation, DesktopDeleteMutationVariables>;

/**
 * __useDesktopDeleteMutation__
 *
 * To run a mutation, you first call `useDesktopDeleteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDesktopDeleteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [desktopDeleteMutation, { data, loading, error }] = useDesktopDeleteMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDesktopDeleteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DesktopDeleteMutation, DesktopDeleteMutationVariables>) {
        return ApolloReactHooks.useMutation<DesktopDeleteMutation, DesktopDeleteMutationVariables>(DesktopDeleteDocument, baseOptions);
      }
export type DesktopDeleteMutationHookResult = ReturnType<typeof useDesktopDeleteMutation>;
export type DesktopDeleteMutationResult = ApolloReactCommon.MutationResult<DesktopDeleteMutation>;
export type DesktopDeleteMutationOptions = ApolloReactCommon.BaseMutationOptions<DesktopDeleteMutation, DesktopDeleteMutationVariables>;
export const DesktopDeletedDocument: DocumentNode = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"subscription","name":{"kind":"Name","value":"DesktopDeleted"},"variableDefinitions":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"DesktopDeleted"},"arguments":[],"directives":[]}]}}]};

/**
 * __useDesktopDeletedSubscription__
 *
 * To run a query within a React component, call `useDesktopDeletedSubscription` and pass it any options that fit your needs.
 * When your component renders, `useDesktopDeletedSubscription` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDesktopDeletedSubscription({
 *   variables: {
 *   },
 * });
 */
export function useDesktopDeletedSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<DesktopDeletedSubscription, DesktopDeletedSubscriptionVariables>) {
        return ApolloReactHooks.useSubscription<DesktopDeletedSubscription, DesktopDeletedSubscriptionVariables>(DesktopDeletedDocument, baseOptions);
      }
export type DesktopDeletedSubscriptionHookResult = ReturnType<typeof useDesktopDeletedSubscription>;
export type DesktopDeletedSubscriptionResult = ApolloReactCommon.SubscriptionResult<DesktopDeletedSubscription>;
export const DesktopListDocument: DocumentNode = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"DesktopList"},"variableDefinitions":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"Desktop"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"DesktopParts"},"directives":[]}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"DesktopParts"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Desktop"}},"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"title"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"description"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"urls"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"created_at"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"updated_at"},"arguments":[],"directives":[]}]}}]};

/**
 * __useDesktopListQuery__
 *
 * To run a query within a React component, call `useDesktopListQuery` and pass it any options that fit your needs.
 * When your component renders, `useDesktopListQuery` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDesktopListQuery({
 *   variables: {
 *   },
 * });
 */
export function useDesktopListQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<DesktopListQuery, DesktopListQueryVariables>) {
        return ApolloReactHooks.useQuery<DesktopListQuery, DesktopListQueryVariables>(DesktopListDocument, baseOptions);
      }
export function useDesktopListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<DesktopListQuery, DesktopListQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<DesktopListQuery, DesktopListQueryVariables>(DesktopListDocument, baseOptions);
        }
export type DesktopListQueryHookResult = ReturnType<typeof useDesktopListQuery>;
export type DesktopListLazyQueryHookResult = ReturnType<typeof useDesktopListLazyQuery>;
export type DesktopListQueryResult = ApolloReactCommon.QueryResult<DesktopListQuery, DesktopListQueryVariables>;
export const DesktopUpdateDocument: DocumentNode = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DesktopUpdate"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"title"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"description"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}},"directives":[]},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"urls"}},"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},"directives":[]}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"DesktopUpdate"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"title"},"value":{"kind":"Variable","name":{"kind":"Name","value":"title"}}},{"kind":"Argument","name":{"kind":"Name","value":"description"},"value":{"kind":"Variable","name":{"kind":"Name","value":"description"}}},{"kind":"Argument","name":{"kind":"Name","value":"urls"},"value":{"kind":"Variable","name":{"kind":"Name","value":"urls"}}}],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"DesktopParts"},"directives":[]}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"DesktopParts"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Desktop"}},"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"title"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"description"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"urls"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"created_at"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"updated_at"},"arguments":[],"directives":[]}]}}]};
export type DesktopUpdateMutationFn = ApolloReactCommon.MutationFunction<DesktopUpdateMutation, DesktopUpdateMutationVariables>;

/**
 * __useDesktopUpdateMutation__
 *
 * To run a mutation, you first call `useDesktopUpdateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDesktopUpdateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [desktopUpdateMutation, { data, loading, error }] = useDesktopUpdateMutation({
 *   variables: {
 *      id: // value for 'id'
 *      title: // value for 'title'
 *      description: // value for 'description'
 *      urls: // value for 'urls'
 *   },
 * });
 */
export function useDesktopUpdateMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DesktopUpdateMutation, DesktopUpdateMutationVariables>) {
        return ApolloReactHooks.useMutation<DesktopUpdateMutation, DesktopUpdateMutationVariables>(DesktopUpdateDocument, baseOptions);
      }
export type DesktopUpdateMutationHookResult = ReturnType<typeof useDesktopUpdateMutation>;
export type DesktopUpdateMutationResult = ApolloReactCommon.MutationResult<DesktopUpdateMutation>;
export type DesktopUpdateMutationOptions = ApolloReactCommon.BaseMutationOptions<DesktopUpdateMutation, DesktopUpdateMutationVariables>;
export const DesktopUpdatedDocument: DocumentNode = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"subscription","name":{"kind":"Name","value":"DesktopUpdated"},"variableDefinitions":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"DesktopUpdated"},"arguments":[],"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"DesktopParts"},"directives":[]}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"DesktopParts"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Desktop"}},"directives":[],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"title"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"description"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"urls"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"created_at"},"arguments":[],"directives":[]},{"kind":"Field","name":{"kind":"Name","value":"updated_at"},"arguments":[],"directives":[]}]}}]};

/**
 * __useDesktopUpdatedSubscription__
 *
 * To run a query within a React component, call `useDesktopUpdatedSubscription` and pass it any options that fit your needs.
 * When your component renders, `useDesktopUpdatedSubscription` returns an object from Apollo Client that contains loading, error, and data properties 
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDesktopUpdatedSubscription({
 *   variables: {
 *   },
 * });
 */
export function useDesktopUpdatedSubscription(baseOptions?: ApolloReactHooks.SubscriptionHookOptions<DesktopUpdatedSubscription, DesktopUpdatedSubscriptionVariables>) {
        return ApolloReactHooks.useSubscription<DesktopUpdatedSubscription, DesktopUpdatedSubscriptionVariables>(DesktopUpdatedDocument, baseOptions);
      }
export type DesktopUpdatedSubscriptionHookResult = ReturnType<typeof useDesktopUpdatedSubscription>;
export type DesktopUpdatedSubscriptionResult = ApolloReactCommon.SubscriptionResult<DesktopUpdatedSubscription>;